/* globals cpcBasic */

"use strict";

cpcBasic.addItem("", function () { /*
1 rem 3dfour - 3D-Four In A Row
2 rem (c) Dudley Brooke, 1987
3 rem Computing with the Amstrad 1987
4 rem https://cpcrulez.fr/GamesTest/four_in_a_row.htm
5 rem
10 MODE 1
20 GOSUB 4260
30 DIM XY(144,2),TABLE(361,4),GRID(144)
40 RANDOMIZE TIME
50 ON BREAK GOSUB 2410
60 GOSUB 2100:REM Defines characters. 
70 PRINT CHR$(23)+CHR$(0)
80 PRINT CHR$(22)+CHR$(0)
90 CLS
100 top=1:Xorigin=40:Yorigin=240:GOSUB 1790:REM Draws top grid.
110 top=0:Xorigin=84:Yorigin=152:GOSUB 1790:REM Draws second grid.
120 Xorigin=130:Yorigin=64:GOSUB 1790:REM Draws third grid.
130 Xorigin=176:Yorigin=-24:GOSUB 1790:REM Draws bottom grid.
140 ORIGIN 0,0
150 GOSUB 1150
160 PEN 1:LOCATE 26,22:PRINT"WHICH LEVEL:";:PEN 3
170 A$=INKEY$:IF A$="" OR (VAL(A$)<1) OR (VAL(A$)>9) THEN GOTO 170
180 PRINT A$:LEVEL=VAL(A$)
190 LOCATE 27,24:PRINT"LEVEL "+A$+" SET."
200 FOR I=1 TO 2000:NEXT:GOSUB 700
210 PEN 2:LOCATE 26,21:PRINT "DO YOU WANT TO":LOCATE 31,22:PRINT"MOVE":LOCATE 27,23:PRINT"FIRST (Y/N)?
220 A$=INKEY$:A$=UPPER$(A$):IF A$="" OR (A$<>"Y" AND A$<>"N") THEN GOTO 220
230 IF A$="Y" THEN START=0:PEN 3:LOCATE 28,24:PRINT " ** YES **" ELSE START=1:PEN 3:LOCATE 28,24:PRINT " ** NO **"
240 FOR I=1 TO 2000:NEXT:GOSUB 700
250 EXIT=0
260 CLOCK=1
270 SEC=1:MTN=0
280 X=334:Y=290:CX=19:CY=12:MM=2:GOSUB 4200
290 X=60:Y=200:CX=2:CY=17:MM=3:GOSUB 4200
300 EVERY 49,1 GOSUB 4160
310 WHILE EXIT=0
320 IF START=1 THEN START=255:GOTO 350
330 GOSUB 3000:REM Human move.
340 IF EXIT=1 THEN GOTO 360
350 GOSUB 3380:REM Computers move.
360 WEND
370 PRINT CHR$(22)+CHR$(0)
380 IF SCORE>HISCORE THEN HISCORE=SCORE:SCORE=0:PEN 2:LOCATE 10,19:PRINT USING "###";HISCORE:LOCATE 10,21:PRINT USING "###";SCORE
390 PEN 2:LOCATE 27,22:PRINT "ANOTHER GAME"
400 LOCATE 30,23:PRINT"(Y/N)?"
410 A$=INKEY$:A$=UPPER$(A$):IF A$="" OR (A$<>"Y" AND A$<>"N") THEN GOTO 410
420 IF A$="Y" THEN PEN 3:LOCATE 28,24:PRINT " ** YES **" ELSE PEN 3:LOCATE 28,24:PRINT " ** NO **"
430 FOR I=1 TO 2000:NEXT:GOSUB 700
440 IF A$="Y" THEN GOSUB 3320:GOTO 160:REM Clears the board for a new game.
450 GOTO 2410
460 REM This test to see whether someone has won. It requires the player type
470 REM to be held in the variable 'PLAYER'.On exitting it returns 'EXIT'   .
480 REM
490 FINISHED=0
500 CLOCK=0
510 DI:PRINT CHR$(22)+CHR$(0);:LOCATE 28,22:PEN 2:PRINT" CHECKING ":EI
520 COUNT%=1
530 WHILE FINISHED=0 AND COUNT%<360
540 IF GRID(TABLE(COUNT%,1))=PLAYER AND GRID(TABLE(COUNT%,2))=PLAYER AND GRID(TABLE(COUNT%,3))=PLAYER AND GRID(TABLE(COUNT%,4))=PLAYER THEN FINISHED=1:EXIT =1 ELSE COUNT%=COUNT%+1
550 WEND
560 IF FINISHED<>1 THEN 680
570 CLOCK=0
580 TAGOFF:PRINT CHR$(22)+CHR$(0);
590 IF FINISHED=1 AND PLAYER=COMPUTER THEN PEN 3:LOCATE 27,21:PRINT"************":LOCATE 27,22:PRINT"*          *":LOCATE 27,23:PRINT"************":PEN 2:LOCATE 29,22:PRINT"I'VE WON"
600 IF FINISHED=1 AND PLAYER=HUMAN THEN PEN 3:LOCATE 27,21:PRINT"************":LOCATE 27,22:PRINT"*          *":LOCATE 27,23:PRINT"************":PEN 2:LOCATE 29,22:PRINT"YOU WIN!"
610 FOR I=1 TO 2000:NEXT I:GOSUB 700
620 PRINT CHR$(23)+CHR$(1);
630 SEC=HSEC+1:IF SEC>59 THEN SEC=0
640 MTN=HMTN:X=334:Y=290:CX=19:CY=12:MM=2:GOSUB 4200
650 SEC=CSEC+1:IF SEC>59 THEN SEC=0
660 MTN=CMTN:X=60:Y=200:CX=2:CY=17:MM=3:GOSUB 4200
670 CSEC=0:HSEC=0:CMTN=0:HMTN=0 
680 IF FINISHED=0 THEN CLOCK=1
690 RETURN
700 REM This routine clears the message window to spaces.
710 REM
720 TAGOFF:PRINT CHR$(22)+CHR$(0);
730 LOCATE 26,21:PRINT STRING$(14," ")
740 LOCATE 26,22:PRINT STRING$(14," ")
750 LOCATE 26,23:PRINT STRING$(14," ")
760 LOCATE 26,24:PRINT STRING$(14," ");
770 LOCATE 26,21
780 PRINT CHR$(22)+CHR$(1);
790 RETURN
800 REM This subroutine captures the players move from the keyboard then value
810 REM is returned in the variable 'NUM' this being in the range 1-16        .
820 NUM=1
830 TAGOFF
840 PRINT CHR$(22)+CHR$(1);
850 PRINT CHR$(23)+CHR$(1);
860 DI:MOVE -1,-1:DRAWR 0,0,1
870 FOR U=0 TO 108 STEP 36
880 NN=U+NUM
890 TAG:MOVE XY(NN,1),XY(NN,2):PRINT CURS$;:MOVE XY(NN,1),XY(NN,2)-16:PRINT CURS1$;:TAGOFF
900 NEXT U
910 EI
920 A$=INKEY$:IF A$="" THEN 920
930 DI:MOVE -1,-1:DRAWR 0,0,1
940 FOR U=0 TO 108 STEP 36
950 NN=U+NUM
960 TAG:MOVE XY(NN,1),XY(NN,2):PRINT CURS$;:MOVE XY(NN,1),XY(NN,2)-16:PRINT CURS1$;:TAGOFF
970 NEXT U
980 EI
990 IF A$=CHR$(&F3) THEN NUM=NUM-1
1000 IF A$=CHR$(&F2) THEN NUM=NUM+1
1010 IF A$=CHR$(&F1) THEN NUM=NUM+6
1020 IF A$=CHR$(&F0) THEN NUM=NUM-6
1030 IF A$=CHR$(&E0) THEN GOTO 1130
1040 IF NUM>36 THEN NUM=NUM-36
1050 IF NUM < 1 THEN NUM=NUM+36
1060 DI:MOVE -1,-1:DRAWR 0,0,1
1070 FOR U= 0 TO 108 STEP 36
1080 NN=U+NUM
1090 TAG:MOVE XY(NN,1),XY(NN,2):PRINT CURS$;:MOVE XY(NN,1),XY(NN,2)-16:PRINT CURS1$;:TAGOFF
1100 NEXT U
1110 EI
1120 GOTO 920
1130 TAGOFF:RETURN
1140 REM The screen is printed out using this subroutine, it's only called once.
1150 ORIGIN 0,0
1160 LOCATE 19,2:PEN 3:PRINT STRING$(22,"*")
1170 LOCATE 19,3:PRINT "*":LOCATE 40,3:PRINT "*";
1180 LOCATE 19,4:PRINT STRING$(22,"*")
1190 PAPER 0
1200 LOCATE 22,3:PEN 1:PRINT "3D-FOUR IN A ROW"
1210 MOVE 390,10:DRAW 390,330,2
1220 DRAW 630,330:DRAW 630,10:DRAW 390,10
1230 MOVE 394,14:DRAW 394,326,2
1240 DRAW 626,326:DRAW 626,14:DRAW 394,14
1250 MOVE 394,80:DRAW 626,80
1260 MOVE 394,84:DRAW 626,84
1270 MOVE 0,0:DRAW 0,399,1:DRAW 639,399:DRAW 639,0:DRAW 0,0
1280 PEN 1:LOCATE 26,6:PRINT"Use cursor pad"
1290 LOCATE 27,7:PRINT"to make move"
1300 PRINT CHR$(22)+CHR$(1)
1310 PEN 3:LOCATE 26,6:PRINT"______________"
1320 LOCATE 27,7:PRINT"____________"
1330 ZONE 1
1340 SCORE=0:HISCORE=0
1350 PRINT CHR$(22)+CHR$(0)
1360 PEN 2:LOCATE 31,9:PRINT" UP"
1370 LOCATE 31,19:PRINT"DOWN"
1380 LOCATE 38,12:PRINT " R":LOCATE 38,13:PRINT " I":LOCATE 38,15:PRINT" H":LOCATE 38,16:PRINT" T"
1390 LOCATE 26,13:PRINT"L"+CHR$(8)+CHR$(10)+"E"+CHR$(8)+CHR$(10)+"F"+CHR$(8)+CHR$(10)+"T"
1400 PEN 1:LOCATE 30,14:PRINT "SELECT"
1410 PEN 3
1420 LOCATE 28,14:PRINT CHR$(242)+CHR$(154)
1430 LOCATE 36,14:PRINT CHR$(154)+CHR$(243);:PEN 2:PRINT" G"
1440 PEN 3
1450 LOCATE 32,11:PRINT CHR$(240)+CHR$(8)+CHR$(10)+CHR$(149)
1460 LOCATE 32,16:PRINT CHR$(149)+CHR$(8)+CHR$(10)+CHR$(241)
1470 PEN 2:LOCATE 3,23:PRINT"HUMAN  ";:PEN 1:PRINT CHR$(242)+CHR$(243);:PEN 2:PRINT " "+CHR$(143)
1480 PEN 2:LOCATE 2,24:PRINT"MACHINE ";:PEN 1:PRINT CHR$(242)+CHR$(243);:PEN 3:PRINT " "+CHR$(143);
1490 PEN 1:LOCATE 2,19:PRINT "HISCORE:":LOCATE 10,19:PRINT USING "###";HISCORE 
1500 LOCATE 4,21:PRINT "SCORE:":LOCATE 10,21:PRINT USING "###";SCORE
1510 PRINT CHR$(22)+CHR$(1)
1520 X=334:Y=290:R=45:C=1:GOSUB 4100
1530 X=334:Y=290:R=41:C=2:GOSUB 4100
1540 FOR I=0 TO 60 STEP 5
1550 MOVE  X+(SIN(I*PI/30)*(R-5)),Y+(COS(I*PI/30)*(R-5))
1560 DRAW X+(SIN(I*PI/30)*R),Y+(COS(I*PI/30)*R),3
1570 NEXT I 
1580 X=60:Y=200:R=45:C=2:GOSUB 4100  
1590 X=60:Y=200:R=41:C=3:GOSUB 4100
1600 FOR I=0 TO 60 STEP 5
1610 MOVE  X+(SIN(I*PI/30)*(R-5)),Y+(COS(I*PI/30)*(R-5))
1620 DRAW X+(SIN(I*PI/30)*R),Y+(COS(I*PI/30)*R),1
1630 NEXT I
1640 PRINT CHR$(23)+CHR$(1)
1650 R=35
1660 HSEC=0:HMTN=0:CSEC=0:CMTN=0
1670 RETURN
1680 REM This subroutine will print out the players piece onto the grid at any
1690 REM location. It requires the player number to be passed in the variable
1700 REM 'PLAYER'. Also the square number is passed in variable 'I'             .
1710 TAGOFF:DI
1720 IF PLAYER=HUMAN THEN COL=2 ELSE COL=3
1730 PRINT CHR$(22)+CHR$(1);:PRINT CHR$(23)+CHR$(1);
1740 MOVE -1,-1:DRAWR 0,0,COL
1750 IF (I>=37 AND I<=41) OR (I>=73 AND I<=77) OR (I>=109 AND I<=113) THEN S$=EDGE$:S1$=EDGE1$:GOTO 1770
1760 S$=BLK$:S1$=BLK1$
1770 TAG:MOVE XY(I,1),XY(I,2):PRINT S$;:MOVE XY(I,1),XY(I,2)-16:PRINT S1$;:TAGOFF:EI
1780 RETURN
1790 REM This subroutine draws one level of the grid on the screen,the position
1800 REM denoted by the value held in variables Xorigin and Yorigin.
1810 REM To show that the top level is being drawn the variable 'top' is set to
1820 REM one , and this is then cleared to zero later in the program.
1830 REM
1840 ORIGIN Xorigin,Yorigin
1850 X=2.8:Y=2.8
1860 MOVE X*10,Y*40
1870 DRAW X*5,Y*38,1:DRAW X*29,Y*7:DRAW X*75,Y*28:DRAW X*52,Y*56
1880 MOVE X*45,Y*52:DRAW X*67,Y*25
1890 MOVE X*38,Y*49:DRAW X*60,Y*21.5
1900 MOVE X*31,Y*46:DRAW X*53,Y*18
1910 MOVE X*23,Y*42:DRAW X*45,Y*14.5
1920 MOVE X*15,Y*39:DRAW X*37,Y*11
1930 MOVE X*9,Y*33:DRAW X*53,Y*53
1940 MOVE X*12,Y*28:DRAW X*57,Y*48
1950 MOVE X*17,Y*23:DRAW X*62,Y*43
1960 MOVE X*20,Y*18:DRAW X*66,Y*38
1970 MOVE X*25,Y*13:DRAW X*70,Y*33
1980 IF top=0 THEN GOTO 2050
1990 MOVE X*10,Y*41:DRAW X*51,Y*59:DRAW X*53,Y*54
2000 MOVE X*45,Y*52:DRAW X*43,Y*55
2010 MOVE X*38,Y*49:DRAW X*36,Y*51
2020 MOVE X*31,Y*46:DRAW X*29,Y*48
2030 MOVE X*23,Y*42:DRAW X*21,Y*45
2040 MOVE X*15,Y*39:DRAW X*13,Y*41
2050 DRAWR 0,0,3
2060 RETURN
2070 REM This subroutine set all the user defined characters, reads all the X-Y
2080 REM co-ordinates, reads the winning combination into the array, set the
2090 REM grid array to zeros and also sets up the counter sprites              .
2100 SYMBOL AFTER 179
2110 SYMBOL 180,0,0,0,0,3,15,15,31
2120 SYMBOL 181,31,15,15,3,0,0,0,0
2130 SYMBOL 182,0,0,0,0,0,192,192,224
2140 SYMBOL 183,224,192,192,0,0,0,0,0
2150 SYMBOL 184,0,0,0,0,0,0,0,1
2160 SYMBOL 185,7,15,15,3,0,0,0,0
2170 SYMBOL 186,0,0,0,0,0,0,192,224
2180 SYMBOL 187,0,0,0,1,7,31,127,255
2190 SYMBOL 188,255,127,63,31,14,0,0,0
2200 SYMBOL 189,0,0,0,192,224,240,248,252
2210 SYMBOL 190,252,248,224,128,0,0,0,0
2220 CURS$=CHR$(187)+CHR$(189):CURS1$=CHR$(188)+CHR$(190)
2230 BLK$=CHR$(180)+CHR$(182):BLK1$=CHR$(181)+CHR$(183)
2240 EDGE$=CHR$(184)+CHR$(186):EDGE1$=CHR$(185)+CHR$(183)
2250 FOR I=1 TO 144:READ XY(I,1),XY(I,2):NEXT I
2260 ZONE 10
2270 INK 0,0
2280 BORDER 27
2290 INK 1,26
2300 INK 2,24
2310 INK 3,6
2320 FOR I%=1 TO 54:READ TABLE(I%,1),TABLE(I%,2),TABLE(I%,3),TABLE(I%,4):NEXT I%
2330 FOR I%=1 TO 54:TABLE(I%+54,1)=TABLE(I%,1)+36:TABLE(I%+54,2)=TABLE(I%,2)+36:TABLE(I%+54,3)=TABLE(I%,3)+36:TABLE(I%+54,4)=TABLE(I%,4)+36:NEXT I%
2340 FOR I%=1 TO 54:TABLE(I%+108,1)=TABLE(I%,1)+72:TABLE(I%+108,2)=TABLE(I%,2)+72:TABLE(I%+108,3)=TABLE(I%,3)+72:TABLE(I%+108,4)=TABLE(I%,4)+72:NEXT I%
2350 FOR I%=1 TO 54:TABLE(I%+162,1)=TABLE(I%,1)+108:TABLE(I%+162,2)=TABLE(I%,2)+108:TABLE(I%+162,3)=TABLE(I%,3)+108:TABLE(I%+162,4)=TABLE(I%,4)+108:NEXT I%
2360 FOR I%= 217 TO 360:READ TABLE(I%,1),TABLE(I%,2),TABLE(I%,3),TABLE(I%,4):NEXT I%
2370 FOR I%=1 TO 144:GRID(I%)=0:NEXT I%
2380 HUMAN=10:COMPUTER=20
2390 CLOCK=0
2400 RETURN
2410 TAGOFF
2420 PRINT CHR$(22)+CHR$(0)
2430 PRINT CHR$(23)+CHR$(0)
2440 INK 1,26:PEN 1
2450 MODE 2
2460 END
2470 RETURN
2480 REM The data that is held below, as the info for the title screen.
2490 DATA 0,143,143,143,32,214,212,32,213,215,213,143,212,0,143,143,215,143,32,143,143,32,143,143,143,212,1,0,143,143,143,143,32,32,143,143,32,143,32,32
2500 DATA 0,214,143,215,143,32,143,143,32,143,213,143,212,0,143,32,143,143,32,143,143,32,143,213,143,212,0,143,143,215,143,32,143,143,143,212,143,213,215
2510 DATA 1,2,0,143,32,143,143,215,143,143,213,143,143,32,143,3,0,214,143,215,143,32,143,143,143,143,143,32,143,1,1,1
2520 DATA 0,143,143,215,143,32,143,143,143,212,143,213,215,0,214,143,215,143,32,143,143,32,143,213,143,212,0,143,32,143,143,32,143,143,143,143,212,32,213
2530 DATA 4
2540 REM
2550 DATA "The object of the game is to get four","counters in a row any where on the grid."," ","It varies from the original game in that","instead of a single board we have four"
2560 DATA "separate boards , all linked together","to form one large 3D board."," ","The advantage of this is that you can","construct a line between all the grids."," "
2570 DATA "Your moves are entered through the","cursor pad on the keyboard, the arrows","show the direction of movement."," ","To enter your move press the key in the"
2580 DATA "centre of the cluster of keys."," ","Your counter will then drop down the","grids until it hits its lowest level."," ","The game is provided with skill levels ,","these go from 1-SIMPLE to 9-VERY HARD."," "
2590 DATA "The game strategy  depends on this","factor."," ","In addition the time it takes for the","computer to move, will vary with this","skill level."," "
2600 DATA "HAVE FUN BYE ...................."
2610 DATA "***"
2620 REM The data that is held in the 'DATA' statements below, are all the X,Y
2630 REM
2640 REM co-ordinates needed to put the pieces onto the board, at every position
2650 DATA 162,407,142,398,122,389,101,380,79,370,58,360,174,394,153,384,133,374,112,365,90,355,68,345,186,379,165,370,145,361,125,351,102,341,80,331,197,365
2660 DATA 177,356,157,346,135,337,112,327,91,317,209,351,189,342,168,333,147,323,125,313,102,303,220,336,200,327,179,318,159,308,136,298,114,288
2670 DATA 206,318,186,310,166,300,145,290,125,280,102,271,218,306,197,296,177,286,156,278,135,267,113,258,230,291,209,282,189,272,169,263,147,254,124,243
2680 DATA 242,277,221,268,201,258,180,249,157,239,134,229,253,263,233,254,212,245,191,235,168,225,146,215,264,249,244,239,223,230,202,220,180,211,158,200
2690 DATA 253,231,232,222,212,212,191,202,170,193,147,183,264,218,244,208,223,199,203,190,181,179,159,170,276,203,255,193,235,184,215,176,193,165,170,155
2700 DATA 287,189,267,180,247,170,226,161,204,151,181,141,299,175,279,166,259,157,237,147,215,137,192,127,310,161,290,152,269,142,248,132,226,122,203,112
2710 DATA 298,142,278,134,258,124,237,114,216,105,193,95,310,130,290,120,269,111,248,102,226,92,204,82,322,115,302,106,281,97,260,87,238,77,216,67,333,101
2720 DATA 313,92,293,82,272,73,249,63,227,53,345,87,325,78,303,69,282,59,260,49,238,39,356,72,336,63,316,54,294,44,272,34,249,24
2730 REM
2740 REM The data that is held in the 'DATA' statements below, are all the
2750 REM possible winning combinations that can occur on a grid of size 6,6,4  .
2760 DATA 1,2,3,4,2,3,4,5,3,4,5,6,7,8,9,10,8,9,10,11,9,10,11,12,13,14,15,16,14,15,16,17,15,16,17,18,19,20,21,22,20,21,22,23,21,22,23,24,25,26,27,28,26,27,28,29
2770 DATA 27,28,29,30,31,32,33,34,32,33,34,35,33,34,35,36
2780 DATA 1,7,13,19,7,13,19,25,13,19,25,31,2,8,14,20,8,14,20,26,14,20,26,32,3,9,15,21,9,15,21,27,15,21,27,33,4,10,16,22,10,16,22,28,16,22,28,34,5,11,17,23
2790 DATA 11,17,23,29,17,23,29,35,6,12,18,24,12,18,24,30,18,24,30,36
2800 DATA 18,23,28,33,12,17,22,27,17,22,27,32,6,11,16,21,11,16,21,26,16,21,26,31,5,10,15,20,10,15,20,25,4,9,14,19,13,20,27,34,7,14,21,28,14,21,28,35
2810 DATA 1,8,15,22,8,15,22,29,15,22,29,36,2,9,16,23,9,16,23,30,3,10,17,24
2820 DATA 1,37,73,109,2,38,74,110,3,39,75,111,4,40,76,112,5,41,77,113,6,42,78,114,7,43,79,115,8,44,80,116,9,45,81,117,10,46,82,118,11,47,83,119,12,48,84,120
2830 DATA 13,49,85,121,14,50,86,122,15,51,87,123,16,52,88,124,17,53,89,125,18,54,90,126,19,55,91,127,20,56,92,128,21,57,93,129,22,58,94,130,23,59,95,131
2840 DATA 24,60,96,132,25,61,97,133,26,62,98,134,27,63,99,135,28,64,100,136,29,65,101,137,30,66,102,138,31,67,103,139
2850 DATA 32,68,104,140,33,69,105,141,34,70,106,142,35,71,107,143,36,72,108,144
2860 DATA 1,38,75,112,2,39,76,113,3,40,77,114,4,39,74,109,5,40,75,110,6,41,76,111,7,44,81,118,8,45,82,119,9,46,83,120,10,45,80,115,11,46,81,116,12,47,82,117
2870 DATA 13,50,87,124,14,51,88,125,15,52,89,126,16,51,86,121,17,52,87,122,18,53,88,123,19,56,93,130,20,57,94,131,21,58,95,132,22,57,92,127,23,58,93,128
2880 DATA 24,59,94,129,25,62,99,136,26,63,100,137,27,64,101,138,28,63,98,133,29,64,99,134,30,65,100,135,31,68,105,142,32,69,106,143,33,70,107,144
2890 DATA 34,69,104,139,35,70,105,140,36,71,106,141
2900 DATA 1,43,85,127,2,44,86,128,3,45,87,129,4,46,88,130,5,47,89,131,6,48,90,132,7,49,91,133,8,50,92,134,9,51,93,135,10,52,94,136,11,53,95,137,12,54,96,138
2910 DATA 13,55,97,139,14,56,98,140,15,57,99,141,16,58,100,142,17,59,101,143,18,60,102,144,19,49,79,109,20,50,80,110,21,51,81,111,22,52,82,112,23,53,83,113
2920 DATA 24,54,84,114,25,55,85,115,26,56,86,116,27,57,87,117,28,58,88,118,29,59,89,119,30,60,90,120,31,61,91,121,32,62,92,122,33,63,93,123,34,64,94,124
2930 DATA 35,65,95,125,36,66,96,126
2940 DATA 1,44,87,130,2,45,88,131,3,46,89,132,4,45,86,127,5,46,87,128,6,47,88,129,7,50,93,136,8,51,94,137,9,52,95,138,10,51,92,133,11,52,93,134,12,53,94,135
2950 DATA 13,56,99,142,14,57,100,143,15,58,101,144,16,57,98,139,17,58,99,140,18,59,100,141,19,50,81,112,20,51,52,113,21,52,83,114,22,51,80,109,23,52,81,110
2960 DATA 24,53,82,111,25,56,87,118,26,57,88,119,27,58,89,120,28,57,86,115,29,58,87,116,30,59,88,117,31,62,93,124,32,63,94,125,33,64,95,126,34,63,92,121
2970 DATA 35,64,93,122,36,65,94,123
2980 REM The human move is handled by this routine, only returning when a valid
2990 REM move has been made.
3000 FINISHED=0
3010 DI
3020 SEC=HSEC+1:MTN=HMTN:IF SEC>59 THEN SEC=0:MTN=MTN+1
3030 PLAYER=HUMAN
3040 EI
3050 TAGOFF
3060 WHILE FINISHED=0
3070 DI
3080 PRINT CHR$(22)+CHR$(0);
3090 PEN 3:LOCATE 27,21:PRINT"************":LOCATE 27,22:PRINT"*          *":LOCATE 27,23:PRINT"************":PEN 2:LOCATE 28,22:PRINT"YOUR MOVE."
3100 EI
3110 GOSUB 820
3120 PRINT CHR$(22)+CHR$(0);
3130 IF GRID(NUM)<>0 AND GRID(NUM+36)<>0 AND GRID(NUM+72)<>0 AND GRID(NUM+108)<>0 THEN PEN 3:LOCATE 28,21:PRINT"************":LOCATE 28,22:PRINT"*          *":LOCATE 28,23:PRINT"************":PEN 2:LOCATE 30,22:PRINT"BAD MOVE" ELSE FINISHED=1:GOTO 3150
3140 FOR I=1 TO 2000:NEXT:GOSUB 700:GOTO 3070
3150 PLAYER=HUMAN
3160 TAGOFF:PRINT CHR$(22)+CHR$(1);
3170 I=NUM:GOSUB 1710
3180 IF NUM+36 >144 THEN GOTO 3200
3190 IF GRID(NUM+36)=0 THEN I=NUM:GOSUB 1710:NUM=NUM+36:GOTO 3170
3200 WEND
3210 FOR T%=1 TO 10:SOUND 1,60,10,15:FOR DELAY=1 TO 250:NEXT DELAY:GOSUB 1710:NEXT T% 
3220 GRID(NUM)=HUMAN
3230 PLAYER=HUMAN:GOSUB 490
3240 GOSUB 700
3250 TAGOFF
3260 IF NUM>=109 AND NUM<=144 THEN SCORE=SCORE+LEVEL
3270 IF NUM>=73 AND NUM<=108 THEN SCORE=SCORE+(2*LEVEL)
3280 IF NUM>=37 AND NUM<=72 THEN SCORE=SCORE+(3*LEVEL)
3290 IF NUM>=1 AND NUM<=36 THEN SCORE=SCORE+(4*LEVEL)
3300 DI:PRINT CHR$(22)+CHR$(0):LOCATE 10,21:PRINT USING "###";SCORE:PRINT CHR$(22)+CHR$(1);:EI
3310 RETURN
3320 REM This subroutine clears the board if the player wants another game.
3330 REM
3340 FOR I=1 TO 144  
3350 IF GRID(I) <> 0 THEN PLAYER=GRID(I):GRID(I)=0:GOSUB 1710
3360 NEXT I
3370 RETURN
3380 REM The computer makes it's move through this subroutine, using the number
3390 REM in the varaible LEVEL to dictate how the computer player. This may
3400 REM take a varying length of time depending on the level.
3410 FINISHED=0
3420 DI
3430 SEC=CSEC+1:MTN=CMTN:IF SEC>59 THEN SEC=0:MTN=MTN+1
3440 PLAYER=COMPUTER
3450 EI
3460 NUM=0
3470 VAR=20
3480 TAGOFF
3490 PRINT CHR$(22)+CHR$(0);
3500 DI
3510 PEN 3:LOCATE 27,21:PRINT"************":LOCATE 27,22:PRINT"*          *":LOCATE 27,23:PRINT"************":PEN 2:LOCATE 29,22:PRINT"THINKING"
3520 EI
3530 WHILE VAR<>0 AND FINISHED<>1
3540 RESULT=3*VAR
3550 FOR II%=0 TO 162 STEP 54
3560 IF INT(RND(1)*LEVEL)=0 AND VAR=20 THEN II%=II%+54:GOTO 3650
3570 FOR I%=1 TO 54
3580 N%=I%+II%
3590 IF GRID(TABLE(N%,1))+GRID(TABLE(N%,2))+GRID(TABLE(N%,3))+GRID(TABLE(N%,4))<> RESULT THEN GOTO 3640
3600 IF GRID(TABLE(N%,1))=VAR AND GRID(TABLE(N%,2))=VAR AND GRID(TABLE(N%,3))=VAR AND GRID(TABLE(N%,4))=0 THEN FINISHED=1:NUM=TABLE(N%,4):I%=54:II%=162:GOTO 3640
3610 IF GRID(TABLE(N%,2))=VAR AND GRID(TABLE(N%,3))=VAR AND GRID(TABLE(N%,4))=VAR AND GRID(TABLE(N%,1))=0 THEN FINISHED=1:NUM=TABLE(N%,1):I%=54:II%=162:GOTO 3640
3620 IF GRID(TABLE(N%,1))=VAR AND GRID(TABLE(N%,2))=VAR AND GRID(TABLE(N%,4))=VAR AND GRID(TABLE(N%,3))=0 THEN FINISHED=1:NUM=TABLE(N%,3):I%=54:II%=162:GOTO 3640
3630 IF GRID(TABLE(N%,1))=VAR AND GRID(TABLE(N%,3))=VAR AND GRID(TABLE(N%,4))=VAR AND GRID(TABLE(N%,2))=0 THEN FINISHED=1:NUM=TABLE(N%,2):I%=54:II%=162:GOTO 3640
3640 NEXT I%
3650 NEXT II%
3660 IF FINISHED=1 THEN GOTO 3750
3670 FOR II%=216 TO 324 STEP 36
3680 IF INT(RND(1)*LEVEL)=0 THEN II%=II%+36:GOTO 3730
3690 FOR I%=1 TO 36
3700 N%=I%+II%
3710 IF GRID(TABLE(N%,2))=VAR AND GRID(TABLE(N%,3))=VAR AND GRID(TABLE(N%,4))=VAR AND GRID(TABLE(N%,1))=0 THEN FINISHED=1:NUM=TABLE(N%,1):I%=36:II%=324
3720 NEXT I%
3730 NEXT II%
3740 VAR=VAR-10
3750 WEND
3760 TAGOFF:PRINT CHR$(23)+CHR$(1);
3770 IF FINISHED=1 THEN GOTO 3980
3780 IF LEVEL < 5 THEN GOTO 3950
3790 VAR=10
3800 WHILE VAR<>30 AND FINISHED<>1
3810 RESULT=2*VAR
3820 FOR NUMBER = 1 TO 360
3830 IF GRID(TABLE(NUMBER,1))+GRID(TABLE(NUMBER,2))+GRID(TABLE(NUMBER,3))+GRID(TABLE(NUMBER,4))<>RESULT THEN GOTO 3910
3840 IF GRID(TABLE(NUMBER,1))=VAR AND GRID(TABLE(NUMBER,2))=VAR THEN FINISHED=1:NUM=TABLE(NUMBER,3):VAR=30:GOTO 3910
3850 IF GRID(TABLE(NUMBER,2))=VAR AND GRID(TABLE(NUMBER,3))=VAR THEN FINISHED=1:NUM=TABLE(NUMBER,4):VAR=30:GOTO 3910
3860 IF GRID(TABLE(NUMBER,3))=VAR AND GRID(TABLE(NUMBER,4))=VAR THEN FINISHED=1:NUM=TABLE(NUMBER,2):VAR=30:GOTO 3910
3870 IF GRID(TABLE(NUMBER,1))=VAR AND GRID(TABLE(NUMBER,4))=VAR THEN FINISHED=1:NUM=TABLE(NUMBER,3):VAR=30:GOTO 3910
3880 IF GRID(TABLE(NUMBER,1))=VAR AND GRID(TABLE(NUMBER,3))=VAR THEN FINISHED=1:NUM=TABLE(NUMBER,2):VAR=30:GOTO 3910
3890 IF GRID(TABLE(NUMBER,2))=VAR AND GRID(TABLE(NUMBER,4))=VAR THEN FINISHED=1:NUM=TABLE(NUMBER,3):VAR=30
3900 IF FINISHED=1 THEN NUMBER=360
3910 NEXT NUMBER
3920 IF FINISHED=1 THEN GOTO 3940
3930 VAR=VAR+10:IF LEVEL<7 THEN VAR=30
3940 WEND
3950 WHILE FINISHED=0
3960 NUM=INT(RND(1)*16)+1:IF GRID(NUM)=0 THEN FINISHED=1
3970 WEND
3980 PLAYER=COMPUTER
3990 I=NUM:GOSUB 1710
4000 IF NUM+36 > 144 THEN GOTO 4020
4010 IF GRID(NUM+36)=0 THEN I=NUM:GOSUB 1710:NUM=NUM+36:GOTO 3990
4020 FOR T%=1 TO 10:SOUND 1,30,10,15:FOR DELAY=1 TO 250:NEXT DELAY:GOSUB 1710:NEXT T% 
4030 GRID(NUM)=COMPUTER
4040 PLAYER=COMPUTER:GOSUB 490
4050 GOSUB 700
4060 TAGOFF
4070 RETURN
4080 REM This routine draws a filled circle on the screen, any size,colour
4090 REM Co-ordinates held in 'X,Y',radius in 'R',colour in 'C'.
4100 FOR Q%=Y-R TO Y+R STEP 2
4110 INC=INT(SQR((R*R)-((Y-Q%)*(Y-Q%)))+0.5)
4120 MOVE X-INC,Q%:DRAW X+INC,Q%,C
4130 NEXT Q%
4140 RETURN
4150 REM The clock is moved by this program section.
4160 IF CLOCK=0 THEN GOTO 4250
4170 IF PLAYER=HUMAN THEN HSEC=SEC:HMTN=MTN:X=334:Y=290:CX=19:CY=12:MM=2 ELSE CSEC=SEC:CMTN=MTN:X=60:Y=200:CX=2:CY=17:MM=3
4180 TAGOFF:MOVE X,Y:DRAW X+(SIN(SEC*PI/30)*R),Y+(COS(SEC*PI/30)*R),MM
4190 SEC=SEC+1:IF SEC>59 THEN SEC=0:MTN=MTN+1
4200 MOVE X,Y:DRAW X+(SIN(SEC*PI/30)*R),Y+(COS(SEC*PI/30)*R),MM
4210 ZONE 1
4220 PRINT CHR$(22)+CHR$(0);
4230 LOCATE CX,CY:PEN MM:PRINT USING "##:##";MTN,SEC 
4240 PRINT CHR$(22)+CHR$(1);
4250 RETURN
4260 REM Display the title screen and shows the instructions.
4270 CLS
4280 INK 0,0:INK 1,0:INK 2,0:INK 3,0
4290 BORDER 1
4300 PEN 1:PAPER 3
4310 LOCATE 3,1:PRINT STRING$(34,CHR$(218))
4320 LOCATE 4,2:PRINT CHR$(221)+STRING$(32,CHR$(207))+CHR$(223)
4330 LOCATE 2,3:PRINT CHR$(217)+CHR$(223)+" "+CHR$(221)+STRING$(32,CHR$(207))+CHR$(223)
4340 LOCATE 2,4:PRINT CHR$(217)+CHR$(207)+CHR$(223)
4350 FOR I= 5 TO 12
4360 LOCATE 2,I:PRINT CHR$(217)+CHR$(207)+CHR$(207)
4370 NEXT I
4380 LOCATE 3,13:PRINT CHR$(221)+CHR$(207)
4390 LOCATE 4,14:PRINT CHR$(221)
4400 PRINT CHR$(22)+CHR$(1)
4410 PEN 1:PAPER 0
4420 LOCATE 2,1:PRINT CHR$(143)+CHR$(215)+CHR$(8)+STRING$(34,CHR$(131))
4430 LOCATE 36,1:PRINT CHR$(213)+CHR$(215)
4440 LOCATE 2,2:PRINT CHR$(143)+CHR$(143)+CHR$(215)+STRING$(32," ")+CHR$(213)+CHR$(215)
4450 LOCATE 2,3:PRINT CHR$(133)+CHR$(213)+CHR$(143)+CHR$(215)+STRING$(32," ")+CHR$(213)+CHR$(215)
4460 LOCATE 2,4:PRINT CHR$(133)+" "+CHR$(213)+CHR$(135)+STRING$(33,CHR$(131))+CHR$(139)
4470 FOR I= 5 TO 12
4480 LOCATE 2,I:PRINT CHR$(133)+"  "+CHR$(133)+STRING$(33," ")+CHR$(138)
4490 NEXT I
4500 LOCATE 2,12:PRINT CHR$(215)
4510 LOCATE 2,13:PRINT CHR$(213)+CHR$(215)+" "+CHR$(133)+STRING$(33," ")+CHR$(138)
4520 LOCATE 3,14:PRINT CHR$(213)+CHR$(215)+CHR$(133)+STRING$(33," ")+CHR$(138)
4530 LOCATE 4,15:PRINT CHR$(213)+CHR$(141)+STRING$(33,CHR$(140))+CHR$(142)
4540 DONE=1
4550 X=96:Y=334
4560 MOVE -1,-1:DRAW 0,0,2
4570 WHILE DONE<> 0
4580 READ T
4590 IF T=1 THEN X=X+16:GOTO 4580
4600 IF T=2 THEN TAG:MOVE X,Y:PRINT CHR$(143);:MOVE X,(Y-16):PRINT CHR$(143);:MOVE X,(Y-32):PRINT CHR$(143);:MOVE X,(Y-48):PRINT CHR$(143);:X=X+32:GOTO 4580
4610 IF T=3 THEN X=X-(25*16):Y=Y-(6*16):GOTO 4580
4620 IF T=4 THEN DONE=DONE-1:GOTO 4680
4630 READ A,B,C:TAG:MOVE X,Y:PRINT CHR$(A)+CHR$(B)+CHR$(C);
4640 READ A,B,C:TAG:MOVE X,(Y-16):PRINT CHR$(A)+CHR$(B)+CHR$(C);
4650 READ A,B,C:TAG:MOVE X,(Y-32):PRINT CHR$(A)+CHR$(B)+CHR$(C);
4660 READ A,B,C:TAG:MOVE X,(Y-48):PRINT CHR$(A)+CHR$(B)+CHR$(C);
4670 X=X+64
4680 WEND
4690 TAGOFF
4700 PRINT CHR$(23)+CHR$(1)
4710 PEN 3:PAPER 0  
4720 FOR I= 5 TO 14
4730 LOCATE 6,I:PRINT STRING$(33,CHR$(207));
4740 NEXT
4750 PRINT CHR$(22)+CHR$(0);
4760 PRINT CHR$(23)+CHR$(0);
4770 INK 1,26:INK 2,24:INK 3,6
4780 LOCATE 5,24:PEN 2:PRINT "DO YOU WANT THE INSTRUCTIONS? :";
4790 A$=INKEY$:A$=UPPER$(A$):IF A$="" THEN GOTO 4790
4800 IF A$<>"Y" AND A$<>"N" THEN GOTO 4790
4810 PEN 3:PRINT A$:FOR I=1 TO 2000:NEXT
4820 IF A$="N" THEN RESTORE 2650:RETURN
4830 WINDOW #1,1,40,16,39
4840 FOR I=1 TO 20:PRINT#1," ":NEXT
4850 COL=1
4860 READ WORD$
4870 WHILE WORD$<>"***"
4880 LOCATE 1,24
4890 FOR I= 1 TO LEN(WORD$)
4900 A$=LEFT$(WORD$,1):WORD$=RIGHT$(WORD$,LEN(WORD$)-1)
4910 PEN COL
4920 PRINT A$;:SOUND 1,ASC(A$),1,7
4930 IF A$<>"." THEN GOTO 4950
4940 COL=COL+1:IF COL>3 THEN COL=1
4950 FOR U=1 TO 70:NEXT
4960 NEXT
4970 PRINT#1
4980 READ WORD$
4990 WEND
5000 RETURN
*/ });
